"use strict";(self.webpackChunkeventmesh_site=self.webpackChunkeventmesh_site||[]).push([[2778],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},m="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),m=l(n),d=o,h=m["".concat(s,".").concat(d)]||m[d]||p[d]||a;return n?r.createElement(h,c(c({ref:t},u),{},{components:n})):r.createElement(h,c({ref:t},u))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,c=new Array(a);c[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[m]="string"==typeof e?e:o,c[1]=i;for(var l=2;l<a;l++)c[l]=n[l];return r.createElement.apply(null,c)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},80431:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>c,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>l});var r=n(87462),o=(n(67294),n(3905));const a={},c="Integrate EventMesh with K8S",i={unversionedId:"instruction/operator",id:"version-v1.11.0/instruction/operator",title:"Integrate EventMesh with K8S",description:"1. Dependencies",source:"@site/versioned_docs/version-v1.11.0/instruction/06-operator.md",sourceDirName:"instruction",slug:"/instruction/operator",permalink:"/zh/docs/instruction/operator",draft:!1,editUrl:"https://github.com/apache/eventmesh-site/edit/master/versioned_docs/version-v1.11.0/instruction/06-operator.md",tags:[],version:"v1.11.0",sidebarPosition:6,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Run Java SDK Demo",permalink:"/zh/docs/instruction/demo"},next:{title:"Frequently Asked Questions",permalink:"/zh/docs/instruction/faq"}},s={},l=[{value:"1. Dependencies",id:"1-dependencies",level:3},{value:"2. Start",id:"2-start",level:3}],u={toc:l},m="wrapper";function p(e){let{components:t,...n}=e;return(0,o.kt)(m,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"integrate-eventmesh-with-k8s"},"Integrate EventMesh with K8S"),(0,o.kt)("h3",{id:"1-dependencies"},"1. Dependencies"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"docker\ngolang (version 1.19)\nkubernetes (kubectl)\nThere is some compatibility between kubernetes an docker, please check the version compatibility between them and download the corresponding version to ensure that they work properly together.\n")),(0,o.kt)("h3",{id:"2-start"},"2. Start"),(0,o.kt)("p",null,"Go to the eventmesh-operator directory."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"cd eventmesh-operator\n")),(0,o.kt)("p",null,"Install CRD into the specified k8s cluster."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"make install\n\n# Uninstall CRDs from the K8s cluster\nmake uninstall\n")),(0,o.kt)("p",null,"If you get error ",(0,o.kt)("inlineCode",{parentName:"p"},"eventmesh-operator/bin/controller-gen: No such file or directory"),", Run the following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"# download controller-gen locally if necessary.\nmake controller-gen\n# download kustomize locally if necessary.\nmake kustomize\n")),(0,o.kt)("p",null,"View crds information:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"# run the following command to view crds information:\nkubectl get crds\nNAME                                      CREATED AT\nconnectors.eventmesh-operator.eventmesh   2023-11-28T01:35:21Z\nruntimes.eventmesh-operator.eventmesh     2023-11-28T01:35:21Z\n")),(0,o.kt)("p",null,"Create and delete CRs:"),(0,o.kt)("p",null,"Custom resource objects are located at: /config/samples"),(0,o.kt)("p",null,"When deleting CR, simply replace create with delete."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"# Create CR for eventmesh-runtime\u3001eventmesh-connector-rocketmq,Creating a clusterIP lets eventmesh-runtime communicate with other components.\nmake create\n\n#success:\nconfigmap/runtime-config created\nruntime.eventmesh-operator.eventmesh/eventmesh-runtime created\nservice/runtime-cluster-service created\nconfigmap/connector-rocketmq-config created\nconnectors.eventmesh-operator.eventmesh/connector-rocketmq created\n\n# View the created Service.\nkubectl get service\nNAME                      TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)     AGE\nruntime-cluster-service   ClusterIP   10.109.209.72   <none>        10000/TCP   17s\n\n# Delete CR\nmake delete\n")),(0,o.kt)("p",null,"Run eventmesh-operator create pods."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},'# run controller\nmake run\n# log\ngo fmt ./...\ngo vet ./...\ngo run ./main.go\nINFO    controller-runtime.metrics      Metrics server is starting to listen    {"addr": ":9020"}\nINFO    setup   starting manager\nINFO    Starting server {"kind": "health probe", "addr": "[::]:8081"}\nINFO    Starting server {"path": "/metrics", "kind": "metrics", "addr": "[::]:9020"}\nINFO    runtime         Creating a new eventMeshRuntime StatefulSet.    {"StatefulSet.Namespace": "default", "StatefulSet.Name": "eventmesh-runtime-0-a"}\nINFO    connector       Creating a new Connector StatefulSet.   {"StatefulSet.Namespace": "default", "StatefulSet.Name": "connector-rocketmq"}\nINFO    runtime         Successful reconciliation!\nINFO    connector       Successful reconciliation!\n\n# After the pods are successfully started, run the following command to view pods.\nkubectl get pods\nNAME                      READY   STATUS    RESTARTS   AGE\nconnector-rocketmq-0      1/1     Running   0          12m\neventmesh-runtime-0-a-0   1/1     Running   0          12m\n')))}p.isMDXComponent=!0}}]);